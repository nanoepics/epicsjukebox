"""
Example for testing FFT filtering of noisy signals and getting the units right.
- input signal can be generated by one of the brownian_oscillator classes
- or can be a real measurements. It is important to know the measurement rate in SI units.
- the amplitude of oscillation as a harmonic frequency is given by
    >> amp = 2*np.sqrt(S(f)*df)
    where S(f) is the power spectrum at frequency f calculated from rfft with proper units of Seconds
    and df is the frequency resolution of the measurement determined by measurement rate and length
    (df = rate/npoints)


"""

import numpy as np
import matplotlib.pyplot as plt
from signals.brownian_oscillator import damped_jiggler as dj

fh = 2 ## lowest harmonic frequency in Hertz
amp = 0.4
rate = 50  ## measurement (frame) rate in Hertz
npoints = 1000  ## total number of the measured data points
hh = 3 ## highest harmonic frequency in the signal
dt = 1/rate  ## time resolution
df = 1/(npoints * dt)   ## frequency resolution of this measurement

## simulating a signal with desired parameters
# j = dj(fh, 1, 0.1, order = hh, phase = 00, frate=rate, baseline=0) # example of sawtoot_jiggler class
j = dj(fh, amp, 0.1, frate=rate, baseline=0)

sig, t = j.jig(npoints/rate)  # the input parameter for jig command is in units of seconds
plt.plot(t[:rate], sig[:rate], '-.')
plt.xlabel("time [second]")
plt.ylabel("amplitude")
plt.show()
pspec = np.abs(np.fft.rfft(sig))**2 / npoints**2 /df
faxis = np.arange(np.size(pspec))*df
frange = int((hh+1) * fh / df)   # range of frequencies in the FFT spectrum with expected features
plt.plot(faxis[:frange],pspec[:frange], '.')
plt.xlabel("Frequency [Hertz]")
plt.ylabel("Power spectrum [Second]")
plt.title("frequency resolution = "+str(df))
plt.show()
print("amplitude of the first harmonic = ",2*np.sqrt(max(pspec)*df))


